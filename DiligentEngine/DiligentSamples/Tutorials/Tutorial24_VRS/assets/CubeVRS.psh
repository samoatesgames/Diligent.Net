#include "Structures.fxh"

ConstantBuffer<Constants> g_Constants;

Texture2D     g_Texture;
SamplerState  g_Texture_sampler;

struct PSInput
{
    float4 Pos : SV_POSITION; 
    float2 UV  : TEX_COORD;
    
#ifndef METAL
    nointerpolation uint Rate : SV_ShadingRate;
#endif
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

float4 ShadingRateToColor(uint ShadingRate)
{
    float  h   = saturate(ShadingRate * 0.1) / 1.35;
    float3 col = float3(abs(h * 6.0 - 3.0) - 1.0, 2.0 - abs(h * 6.0 - 2.0), 2.0 - abs(h * 6.0 - 4.0));
    return float4(clamp(col, float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0)), 1.0);
}

void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    float4 Col = g_Texture.Sample(g_Texture_sampler, PSIn.UV);
#ifdef METAL
    PSOut.Color = Col;
#else
    switch (g_Constants.DrawMode)
    {
        case 0: PSOut.Color = Col; break;
        case 1: PSOut.Color = (Col + ShadingRateToColor(PSIn.Rate)) * 0.5; break;
    }
#endif
}
